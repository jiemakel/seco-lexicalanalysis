// Generated by http://code.google.com/p/protostuff/ ... DO NOT EDIT!
// Generated from connexor.proto

package fi.seco.lexical.connexor.model;

import java.io.Externalizable;
import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;

import com.dyuproject.protostuff.GraphIOUtil;
import com.dyuproject.protostuff.Input;
import com.dyuproject.protostuff.Message;
import com.dyuproject.protostuff.Output;
import com.dyuproject.protostuff.Schema;

public final class ConnexorRequest implements Externalizable, Message<ConnexorRequest>
{
    public enum Type implements com.dyuproject.protostuff.EnumLite<Type>
    {
        BREAK(1),
        MMD(2),
        MT(3),
        MSUM(4),
        MPT(5),
        LANG(6),
        CLEANHTML(7);
        
        public final int number;
        
        private Type (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static Type valueOf(int number)
        {
            switch(number) 
            {
                case 1: return BREAK;
                case 2: return MMD;
                case 3: return MT;
                case 4: return MSUM;
                case 5: return MPT;
                case 6: return LANG;
                case 7: return CLEANHTML;
                default: return null;
            }
        }
    }
    public enum TagOption implements com.dyuproject.protostuff.EnumLite<TagOption>
    {
        REMOVE_ALL_REPLACE_WITH_ONE_SPACE(1),
        REMOVE_ALL_EXCEPT_DESCRIPTIVE_REPLACE_WITH_ONE_SPACE(2),
        REMOVE_ALL_REPLACE_WITH_SPACES(3),
        REMOVE_ALL_EXCEPT_DESCRIPTIVE_REPLACE_WITH_SPACES(4),
        REMOVE_ALL_ALSO_NEWLINES(5),
        REMOVE_ALL_EXCEPT_DESCRIPTIVE_ALSO_NEWLINES(6);
        
        public final int number;
        
        private TagOption (int number)
        {
            this.number = number;
        }
        
        public int getNumber()
        {
            return number;
        }
        
        public static TagOption valueOf(int number)
        {
            switch(number) 
            {
                case 1: return REMOVE_ALL_REPLACE_WITH_ONE_SPACE;
                case 2: return REMOVE_ALL_EXCEPT_DESCRIPTIVE_REPLACE_WITH_ONE_SPACE;
                case 3: return REMOVE_ALL_REPLACE_WITH_SPACES;
                case 4: return REMOVE_ALL_EXCEPT_DESCRIPTIVE_REPLACE_WITH_SPACES;
                case 5: return REMOVE_ALL_ALSO_NEWLINES;
                case 6: return REMOVE_ALL_EXCEPT_DESCRIPTIVE_ALSO_NEWLINES;
                default: return null;
            }
        }
    }


    public static Schema<ConnexorRequest> getSchema()
    {
        return SCHEMA;
    }

    public static ConnexorRequest getDefaultInstance()
    {
        return DEFAULT_INSTANCE;
    }

    static final ConnexorRequest DEFAULT_INSTANCE = new ConnexorRequest();

    
    // non-private fields
    // see http://developer.android.com/guide/practices/design/performance.html#package_inner
    Type type;
    String text;
    String locale;
    TagOption tagOption;

    public ConnexorRequest()
    {
        
    }

    // getters and setters

    // type

    public Type getType()
    {
        return type == null ? Type.BREAK : type;
    }

    public void setType(Type type)
    {
        this.type = type;
    }

    // text

    public String getText()
    {
        return text;
    }

    public void setText(String text)
    {
        this.text = text;
    }

    // locale

    public String getLocale()
    {
        return locale;
    }

    public void setLocale(String locale)
    {
        this.locale = locale;
    }

    // tagOption

    public TagOption getTagOption()
    {
        return tagOption == null ? TagOption.REMOVE_ALL_REPLACE_WITH_ONE_SPACE : tagOption;
    }

    public void setTagOption(TagOption tagOption)
    {
        this.tagOption = tagOption;
    }

    // java serialization

    public void readExternal(ObjectInput in) throws IOException
    {
        GraphIOUtil.mergeDelimitedFrom(in, this, SCHEMA);
    }

    public void writeExternal(ObjectOutput out) throws IOException
    {
        GraphIOUtil.writeDelimitedTo(out, this, SCHEMA);
    }

    // message method

    public Schema<ConnexorRequest> cachedSchema()
    {
        return SCHEMA;
    }

    static final Schema<ConnexorRequest> SCHEMA = new Schema<ConnexorRequest>()
    {
        // schema methods

        public ConnexorRequest newMessage()
        {
            return new ConnexorRequest();
        }

        public Class<ConnexorRequest> typeClass()
        {
            return ConnexorRequest.class;
        }

        public String messageName()
        {
            return ConnexorRequest.class.getSimpleName();
        }

        public String messageFullName()
        {
            return ConnexorRequest.class.getName();
        }

        public boolean isInitialized(ConnexorRequest message)
        {
            return true;
        }

        public void mergeFrom(Input input, ConnexorRequest message) throws IOException
        {
            for(int number = input.readFieldNumber(this);; number = input.readFieldNumber(this))
            {
                switch(number)
                {
                    case 0:
                        return;
                    case 1:
                        message.type = Type.valueOf(input.readEnum());
                        break;
                    case 2:
                        message.text = input.readString();
                        break;
                    case 3:
                        message.locale = input.readString();
                        break;
                    case 4:
                        message.tagOption = TagOption.valueOf(input.readEnum());
                        break;
                    default:
                        input.handleUnknownField(number, this);
                }   
            }
        }


        public void writeTo(Output output, ConnexorRequest message) throws IOException
        {
            if(message.type != null)
                 output.writeEnum(1, message.type.number, false);

            if(message.text != null)
                output.writeString(2, message.text, false);

            if(message.locale != null)
                output.writeString(3, message.locale, false);

            if(message.tagOption != null)
                 output.writeEnum(4, message.tagOption.number, false);
        }

        public String getFieldName(int number)
        {
            switch(number)
            {
                case 1: return "type";
                case 2: return "text";
                case 3: return "locale";
                case 4: return "tagOption";
                default: return null;
            }
        }

        public int getFieldNumber(String name)
        {
            final Integer number = fieldMap.get(name);
            return number == null ? 0 : number.intValue();
        }

        final java.util.HashMap<String,Integer> fieldMap = new java.util.HashMap<String,Integer>();
        {
            fieldMap.put("type", 1);
            fieldMap.put("text", 2);
            fieldMap.put("locale", 3);
            fieldMap.put("tagOption", 4);
        }
    };
    
}
